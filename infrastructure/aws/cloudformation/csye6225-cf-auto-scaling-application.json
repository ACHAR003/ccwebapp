{  
    "AWSTemplateFormatVersion":"2010-09-09",
    "Description":"Application JSON",
    "Parameters":{  
        "StackName":{  
            "Type":"String",
            "Description":"Enter Stack Name"
        },
        "NetworkStackName":{  
            "Type":"String",
            "Description":"Enter Network stack name"
        },
        "AmiId":{  
            "Type":"String",
            "Description":"Enter AMI ID"
        },
        "KeyName":{  
            "Type":"String",
            "Description":"Please enter string for Key Name"
        },
        "BucketName":{  
            "Description":"Enter S# Bucket Name",
            "Type":"String"
        }
    },
    "Resources":{  
        "WebServerSecurityGroup":{  
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{  
                "GroupDescription":"This Security Group is for Webserver",
                "VpcId":{  
                    "Fn::ImportValue":{  
                        "Fn::Sub":"${NetworkStackName}-vpcid"
                    }
                },
                "SecurityGroupIngress":[  
                    {  
                        "IpProtocol":"tcp",
                        "CidrIp":"0.0.0.0/0",
                        "FromPort":22,
                        "ToPort":22
                    },
                    {  
                        "IpProtocol":"tcp",
                        "CidrIp":"0.0.0.0/0",
                        "FromPort":80,
                        "ToPort":80
                    },
                    {  
                        "IpProtocol":"tcp",
                        "CidrIp":"0.0.0.0/0",
                        "FromPort":443,
                        "ToPort":443
                    }
                ]
            }
        },
        "DBServerSecurityGroup":{  
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{  
                "GroupDescription":"Enable SSH ingress",
                "VpcId":{  
                    "Fn::ImportValue":{  
                        "Fn::Sub":"${NetworkStackName}-vpcid"
                    }
                },
                "SecurityGroupIngress":[  
                    {  
                        "IpProtocol":"tcp",
                        "FromPort":"3306",
                        "ToPort":"3306",
                        "SourceSecurityGroupId":{  
                            "Fn::GetAtt":[  
                                "WebServerSecurityGroup",
                                "GroupId"
                            ]
                        }
                    }
                ]
            }
        },
        "WebServerGroup" : {

      "Type" : "AWS::AutoScaling::AutoScalingGroup",

      "Properties" : {

        "VPCZoneIdentifier" : [{"Fn::ImportValue":{"Fn::Sub":"${NetworkStackName}-subnet1id"}},
                             {"Fn::ImportValue":{"Fn::Sub":"${NetworkStackName}-subnet2id"}},
                             {"Fn::ImportValue":{"Fn::Sub":"${NetworkStackName}-subnet3id"}}],


        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },

        "MinSize" : "3",

        "MaxSize" : "7",
        
        "Cooldown" : "60",

        "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ]

      }
      },
      "LaunchConfig" : {
        "Type" : "AWS::AutoScaling::LaunchConfiguration",
        "Properties" : {
          "ImageId":{  
                    "Ref":"AmiId"
                },
          "InstanceType":"t2.micro",
          "KeyName":{  
                    "Ref":"KeyName"
                },
          "AssociatePublicIpAddress" : "true",
          "IamInstanceProfile":{  
                    "Fn::ImportValue":"EC2InstanceProfile"
                },
          "LaunchConfigurationName" : "asg_launch_config",
          "SecurityGroups":[{
                    "Ref":"InstanceSecurityGroup"
                }],
          "UserData":{  
                    "Fn::Base64":{  
                        "Fn::Join":[  
                            "",
                            [  
                                "#!/bin/bash \n",
                                "echo export DB_HOST=",{"Fn::GetAtt":["myRDS","Endpoint.Address"]}," >> /etc/profile \n",
                                "echo export DB_PORT=",{"Fn::GetAtt":["myRDS","Endpoint.Port"]}," >> /etc/profile \n",
                                "echo export DB_USERNAME='csye6225master' >> /etc/profile \n",
                                "echo export DB_PASSWORD='csye6225password' >> /etc/profile \n",
                                "echo export S3_BUCKET=",{"Fn::Sub":"csye6225-su19-${BucketName}.me.csye6225.com"}," >> /etc/profile \n",
				"echo export SNS_TOPIC=",{"Ref": "mySNSTopic" }," >> /etc/profile \n",
                                "source /etc/profile \n",
                                "sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080"
                            ]
                        ]
                    }
                }
            }
        },
        "myDBSubnetGroup":{  
            "Type":"AWS::RDS::DBSubnetGroup",
            "Properties":{  
                "DBSubnetGroupDescription":"This is subnet description",
                "SubnetIds":[  
                    {  
                        "Fn::ImportValue":{  
                            "Fn::Sub":"${NetworkStackName}-subnet1id"
                        }
                    },
                    {  
                        "Fn::ImportValue":{  
                            "Fn::Sub":"${NetworkStackName}-subnet2id"
                        }
                    },
                    {  
                        "Fn::ImportValue":{  
                            "Fn::Sub":"${NetworkStackName}-subnet3id"
                        }
                    }
                ]
            }
        },
        "myRDS":{  
            "Type":"AWS::RDS::DBInstance",
            "Properties":{  
                "AllocatedStorage":"20",
                "DBInstanceClass":"db.m4.large",
                "MultiAZ":"false",
                "DBInstanceIdentifier":"csye6225-su19",
                "MasterUsername":"csye6225master",
                "Engine":"MariaDB",
                "MasterUserPassword":"csye6225password",
                "DBSubnetGroupName":{  
                    "Ref":"myDBSubnetGroup"
                },
                "VPCSecurityGroups":[  
                    {  
                        "Ref":"DBServerSecurityGroup"
                    }
                ],
                "PubliclyAccessible":"true",
                "DBName":"csye6225"
            }
        },
        "myDynamoDBTable":{  
            "Type":"AWS::DynamoDB::Table",
            "Properties":{  
                "TableName":"csye6225",
		"TimeToLiveSpecification":{
			"AttributeName" : "expiration",
		        "Enabled" : "true"	
		},
                "AttributeDefinitions":[  
                    {  
                        "AttributeName":"id",
                        "AttributeType":"S"
                    }
                ],
                "KeySchema":[  
                    {  
                        "AttributeName":"id",
                        "KeyType":"HASH"
                    }
                ],
                "ProvisionedThroughput":{  
                    "ReadCapacityUnits":"5",
                    "WriteCapacityUnits":"5"
                }
            }
        },
        "mySNSTopic":{  
            "Type":"AWS::SNS::Topic",
            "Properties":{  
                "DisplayName":"password_reset",
                "Subscription":[  
                    {  
                        "Endpoint":{  
                            "Fn::GetAtt":[  
                                "myLambdaFunction",
                                "Arn"
                            ]
                        },
                        "Protocol":"lambda"
                    }
                ],
                "TopicName":"password_reset"
            }
        },
        "myLambdaFunction":{  
            "Type":"AWS::Lambda::Function",
            "Properties":{  
                "Code":{  
                    "S3Bucket":{"Fn::Sub":"code-deploy.csye6225-su19-${BucketName}.me"},
                    "S3Key":"LambdaPackage.zip"
                },
                "Description":"Lambda Function to reset password",
                "FunctionName":"password_reset",
                "Handler":"lambda.DynamoLambda::handleRequest",
                "MemorySize":512,
                "Role":{  
                    "Fn::ImportValue":"LambdaExecutionRole"
                },
		"Environment": {
                   "Variables": {
                   	"AWS_DOMAIN_NAME": {  "Ref" : "BucketName"  }
		   }
	        },
                "Runtime":"java8",
                "Timeout":300,
                "TracingConfig":{  
                    "Mode":"Active"
                }
            }
        },

	"LambdaPermission":{
		"Type" : "AWS::Lambda::Permission",
  		"Properties" : {
      			"Action" : "lambda:InvokeFunction",
      			"FunctionName" : {"Ref":"myLambdaFunction"},
      			"Principal" : "sns.amazonaws.com"
    		}
	},

	"ApplicationLoadBalancer" : {
      		"Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      		"Properties" : {
        	"Subnets" : [{"Fn::ImportValue":{"Fn::Sub":"${NetworkStackName}-subnet1id"}},
			     {"Fn::ImportValue":{"Fn::Sub":"${NetworkStackName}-subnet2id"}},
			     {"Fn::ImportValue":{"Fn::Sub":"${NetworkStackName}-subnet3id"}}],
		"Scheme" : "internet-facing",
		"Name" : "LOAD-BALANCER"
      		}
    	},

	"Route53RecordSet":{
		"Type" : "AWS::Route53::RecordSet",
  		"Properties" : {
      			"AliasTarget" : {
				 "DNSName" : {"Fn::GetAtt":["ApplicationLoadBalancer","DNSName"]},
  				 "HostedZoneId" : {"Fn::GetAtt":["ApplicationLoadBalancer","CanonicalHostedZoneID"]}
			},
      			"HostedZoneName" : {"Fn::Sub":"csye6225-su19-${BucketName}.me"},
      			"Name" : {"Fn::Sub":"csye6225-su19-${BucketName}.me"}
    		}
	},
	"HttpsListener":{
  		"Type" : "AWS::ElasticLoadBalancingV2::Listener",
  		"Properties" : {
      			"Certificates" : [ {"CertificateArn" : {"Ref":"CertificateArn"}}],
      			"DefaultActions" : [ {"Type" : "forward",
					      "TargetGroupArn": {"Ref":"ALBTargetGroup"} }],
      			"LoadBalancerArn" : {"Ref":"ApplicationLoadBalancer"},
      			"Port" : 443,
      			"Protocol" : "HTTPS"
    		}
	}
    }
}
